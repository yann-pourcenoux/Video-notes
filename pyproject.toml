[project]
name = "video-notes"
version = "1.0.0"
description = "A Python package for downloading and summarizing YouTube video transcripts using Ollama"
readme = "README.md"
authors = [
    { name = "Yann POURCENOUX", email = "yann.pourcenoux@oneflow.com" }
]
requires-python = ">=3.11"
dependencies = [
    "youtube-transcript-api>=0.6.0",
    "yt-dlp>=2023.0.0",
    "ollama>=0.1.0",
    "python-dotenv>=1.1.1",
    "pydantic>=2.9.2",
    "streamlit>=1.46.1",
    "loguru>=0.7.3",
]


[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "isort>=5.13.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "commitizen>=3.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/video_notes"]



[tool.isort]
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
target-version = "py311"
line-length = 100
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors (via ruff)
    "W",  # pycodestyle warnings (via ruff)
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    "S",  # flake8-bandit
    "T",  # flake8-print
    "Q",  # flake8-quotes
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "D",  # pydocstyle (docstring checks via ruff)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["D", "S101", "S106"]
"scripts/**/*" = ["D", "T201", "F401", "S603"]
"src/video_notes/services/ai_service.py" = ["S110"]  # Allow silent exception handling for provider detection

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "build/",
    "dist/",
]

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101"]  # Skip assert_used test

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-v --cov=video_notes --cov-report=term-missing"
